apply plugin: 'forge'    // forge tasks
apply plugin: 'java'    // enables sourcesets
apply plugin: 'idea'    // enable automatic setup of idea workspace
apply plugin: 'shadow'  // enables shadow
apply plugin: 'apt'     // enable annotation preprocessor

apply from: 'gradle/scripts/properties.gradle'
apply from: 'gradle/scripts/versioning.gradle'
apply from: 'gradle/scripts/deobf.gradle'

sourceCompatibility = 1.7
targetCompatibility = 1.7

group = 'de.thatsich.intellie'
archivesBaseName = "IntelligentEnergistics"
version = project.ext.version.toString()

// needed for pulling new versions from forge
minecraft {
	version = "${project.ext.DAGGER_VERSION}-${project.ext.FORGE_VERSION}"
	assetDir = "../.idea/assets"
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "shadow-repo"
	        url = "http://dl.bintray.com/content/johnrengelman/gradle-plugins/"
        }
    }
    dependencies {
	    classpath "net.minecraftforge.gradle:ForgeGradle:${project.ext.FORGE_GRADLE_VERSION}"
	    classpath "com.github.jengelman.gradle.plugins:shadow:${project.ext.SHADOW_VERSION}"
	    classpath "com.squareup.dagger:dagger-compiler:${project.ext.DAGGER_VERSION}"
	    classpath "com.jimdo.gradle:gradle-apt-plugin:${project.ext.APT_VERSION}"
    }
}

configurations {
	apt
}

dependencies {
	apt "com.squareup.dagger:dagger-compiler:${project.ext.DAGGER_VERSION}"
	compile "com.squareup.dagger:dagger:${project.ext.DAGGER_VERSION}"
}

// exclude layers and integration of (AE2)
sourceSets {
    api {
        java {
            exclude '**/layers/**'
            exclude '**/integration/**'
        }
    }
}

// Ship specific libs with it
shadow {
	artifactSet {
		include 'de.thatsich.intellie'
		include 'com.squareup.dagger'
		include 'javax.inject'
	}

	// The resulting file is named <projectname>-<mcversion>-<version>-universal.jar
	baseName = "${archivesBaseName}-${project.minecraft.version}"
	classifier = "universal"
}

processResources
		{
			// replace stuff in mcmod.info, nothing else
			from(sourceSets.main.resources.srcDirs) {
				include 'mcmod.info'

				// replace version and mcversion
				expand 'version': project.version, 'mcversion': $ { project.ext.MINECRAFT_VERSION }
			}

			// copy everything else, thats not the mcmod.info
			from(sourceSets.main.resources.srcDirs) {
				exclude 'mcmod.info'
			}
		}
